name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, edited]


env:
  BUILD_TYPE: RelWithDebInfo
  QTEST_FUNCTION_TIMEOUT: 60000

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        qt_version: [ 5.12.1, 6.2.0 ]
        compiler: [ gcc-10, clang-11, msvc ]
        exclude:
          - os: ubuntu-latest
            compiler: msvc
          - os: windows-latest
            compiler: gcc-10
          - os: windows-latest
            compiler: clang-11
          - os: windows-latest
            qt_version: 5.12.1
        include:
          - os: windows-latest
            compiler: msvc
            qt_version: 5.15.2

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}-qt${{ matrix.qt_version}}-${{ matrix.compiler }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install Qt
      uses: ./.github/actions/install-qt
      with:
        qt_version: ${{ matrix.qt_version }}
        compiler: ${{ matrix.compiler }}

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        QT_VERSION_MAJOR=$(echo ${{ matrix.qt_version }} | cut -d'.' -f1)
        ARGS="-DCMAKE_BUILD_TYPE=$BULD_TYPE -DUSE_QT_VERSION=$QT_VERSION_MAJOR -DQCORO_WITH_DBUS=ON"
        # Don't enable ASAN on Qt5 MSVC build: it crashes due to some false-positive issue outside of QCoro
        if [[ "${{ matrix.compiler }}" != "msvc" || "${QT_VERSION_MAJOR}" != "5" ]]; then
          ARGS="${ARGS} -DQCORO_ENABLE_ASAN=ON"
        fi
        if [[ "${{ matrix.compiler }}" == "gcc-10"* ]]; then
          ARGS="$ARGS -DCMAKE_CXX_COMPILER=/usr/bin/g++-10"
        elif [[ "${{ matrix.compiler }}" == "clang-11" ]]; then
          ARGS="$ARGS -DCMAKE_CXX_COMPILER=/usr/bin/clang++-11"
        fi

        cmake $GITHUB_WORKSPACE $ARGS

    - name: Add ASAN DLL directory to PATH
      if: ${{ matrix.os == 'windows-latest' }}
      shell: cmd
      run: |
        setlocal enabledelayedexpansion
        for /f "usebackq tokens=*" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (set InstallDir=%%i)
        if exist "%InstallDir%\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt" (
          set /p Version=<"%InstallDir%\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt"
          set Version=!Version: =!
        )
        if not "%Version%" == "" (
          set /p="%InstallDir%\VC\Tools\MSVC\%Version%\bin\HostX64\x64" < nul > %GITHUB_PATH%
          exit 0
        )

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --parallel 4 --verbose

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: QT_LOGGING_TO_CONSOLE=1 ctest -C $BUILD_TYPE --output-on-failure --verbose --output-junit qcoro-test-results.xml

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Tests Results (${{ matrix.os }}-qt${{ matrix.qt_version }}-${{ matrix.compiler }})
        path: |
          ${{ github.workspace }}/build/qcoro-test-results.xml

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: build-${{ matrix.os }}-qt${{ matrix.qt_version }}-${{ matrix.compiler }}
        path: build/**

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}
